pyroscope:
  storage:
    type: s3
    s3:
      bucket: "pyroscope"
      endpoint: "master.sale.elewise.com:9000"
      insecure: false  # Включаем TLS
      existingSecret: "pyroscope-s3-creds"  # Secret с access_key/secret_key
      tls:
        enabled: true
  alloy:
    
    enabled: true
    config: |
      logging {
        level = "info"
      }

      discovery.kubernetes "pods" {
        role = "pod"
      }

      # Общие фильтры по namespace и наличию label app
      locals {
        match_ns  = ["elma365", "elma365-dbs"]
        match_app = ".*"
      }

      # CPU
      discovery.relabel "cpu" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          regex         = join("|", local.match_ns)
          action        = "keep"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          regex         = local.match_app
          action        = "keep"
        }

        rule {
          target_label  = "__param_profile_type"
          replacement   = "cpu"
          action        = "replace"
        }

        rule {
          target_label  = "__param_path"
          replacement   = "/debug/pprof/profile"
          action        = "replace"
        }

        rule {
          target_label  = "__param_port"
          replacement   = "8080"
          action        = "replace"
        }

        rule {
          source_labels = ["__address__", "__param_port"]
          separator     = ":"
          target_label  = "__address__"
          action        = "replace"
          replacement   = "$1:$2"
        }
      }

      # MEMORY
      discovery.relabel "memory" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          regex         = join("|", local.match_ns)
          action        = "keep"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          regex         = local.match_app
          action        = "keep"
        }

        rule {
          target_label  = "__param_profile_type"
          replacement   = "heap"
          action        = "replace"
        }

        rule {
          target_label  = "__param_path"
          replacement   = "/debug/pprof/heap"
          action        = "replace"
        }

        rule {
          target_label  = "__param_port"
          replacement   = "8080"
          action        = "replace"
        }

        rule {
          source_labels = ["__address__", "__param_port"]
          separator     = ":"
          target_label  = "__address__"
          action        = "replace"
          replacement   = "$1:$2"
        }
      }

      # GOROUTINE
      discovery.relabel "goroutine" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          regex         = join("|", local.match_ns)
          action        = "keep"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          regex         = local.match_app
          action        = "keep"
        }

        rule {
          target_label  = "__param_profile_type"
          replacement   = "goroutine"
          action        = "replace"
        }

        rule {
          target_label  = "__param_path"
          replacement   = "/debug/pprof/goroutine"
          action        = "replace"
        }

        rule {
          target_label  = "__param_port"
          replacement   = "8080"
          action        = "replace"
        }

        rule {
          source_labels = ["__address__", "__param_port"]
          separator     = ":"
          target_label  = "__address__"
          action        = "replace"
          replacement   = "$1:$2"
        }
      }

      profiling.scrape "cpu" {
        targets = discovery.relabel.cpu.output
        forward_to = [profiling.write.default.receiver]
      }

      profiling.scrape "memory" {
        targets = discovery.relabel.memory.output
        forward_to = [profiling.write.default.receiver]
      }

      profiling.scrape "goroutine" {
        targets = discovery.relabel.goroutine.output
        forward_to = [profiling.write.default.receiver]
      }

      profiling.write "default" {
        endpoint {
          url = "http://pyroscope.pyroscope.svc.cluster.local:4040"
        }
      }