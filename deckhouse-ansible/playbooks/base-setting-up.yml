---
- name: Подготовка master-ноды для добавления воркеров
  hosts: master
  become: true
  tasks:
    - name: Установить базу и зависимости
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
        state: present
        update_cache: true
        
    - name: Установить переменную с домашним каталогом
      set_fact:
        master_home_dir: "{{ '/root' if hostvars['master'].ansible_user == 'root' else '/home/' + hostvars['master'].ansible_user }}"

    - name: Получить NodeGroup master
      ansible.builtin.shell: sudo -i d8 k get nodegroup master -o json
      register: nodegroup_json
      changed_when: false

    - name: Удалить taints, если они есть
      ansible.builtin.shell: |
        sudo -i d8 k patch nodegroup master --type json -p '[{"op": "remove", "path": "/spec/nodeTemplate/taints"}]'
      when: nodegroup_json.stdout is search('"taints"')

    - name: Создание LocalPathProvisioner
      ansible.builtin.shell: |
        sudo -i d8 k create -f - << EOF
        apiVersion: deckhouse.io/v1alpha1
        kind: LocalPathProvisioner
        metadata:
          name: localpath
        spec:
          path: "/opt/local-path-provisioner"
          reclaimPolicy: Delete
        EOF
      register: localpath_result
      failed_when: >
        localpath_result.rc != 0 and
        ('AlreadyExists' not in localpath_result.stderr)
      changed_when: "'AlreadyExists' not in localpath_result.stderr"

    - name: Пропатчить defaultClusterStorageClass
      ansible.builtin.shell: |
        sudo -i d8 k patch mc global --type merge \
        -p '{"spec": {"settings":{"defaultClusterStorageClass":"localpath"}}}'
    
    - name: Ожидание полной готовности kruise-controller-manager (Deployment rollout)
      ansible.builtin.shell: |
        sudo -i d8 kubectl -n d8-ingress-nginx rollout status deployment kruise-controller-manager --timeout=300s
      register: kruise_deploy_status
      failed_when: kruise_deploy_status.rc != 0
      changed_when: false


    - name: Создать ingress-nginx-controller
      template:
        src: templates/ingress-nginx-controller.yml.j2
        dest: "{{ master_home_dir }}/ingress-nginx-controller.yml"

    - name: Применить ingress-nginx-controller
      ansible.builtin.shell: sudo -i d8 k create -f {{ master_home_dir }}/ingress-nginx-controller.yml
      register: ingress_nginx_result
      failed_when: >
        ingress_nginx_result.rc != 0 and
        ('AlreadyExists' not in ingress_nginx_result.stderr)
      changed_when: "'AlreadyExists' not in ingress_nginx_result.stderr"

    - name: Ожидание запуска контроллера ingress
      ansible.builtin.shell: |
        until sudo -i d8 kubectl -n d8-ingress-nginx get pods -l app=controller \
          -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' \
          | grep -q .; do
          echo "Ожидаем запуск ingress-controller..." && sleep 10
        done
      retries: 30
      delay: 10
      register: ingress_status
      until: ingress_status.rc == 0
    # - name: Включить nginx модуль
    #   shell: /opt/deckhouse/bin/kubectl -ti -n d8-system exec svc/deckhouse-leader -c deckhouse -- deckhouse-controller module enable ingress-nginx

    - name: Создать NodeGroup worker
      template:
        src: templates/nodegroup-worker.yaml.j2
        dest: "{{ master_home_dir }}/nodegroup-worker.yaml"
      

    - name: Применить NodeGroup worker
      ansible.builtin.shell: sudo -i d8 k create -f {{ master_home_dir }}/nodegroup-worker.yaml
      register: worker_nodegroup_result
      failed_when: >
        worker_nodegroup_result.rc != 0 and
        ('AlreadyExists' not in worker_nodegroup_result.stderr)
      changed_when: "'AlreadyExists' not in worker_nodegroup_result.stderr"

    - name: Создать пользователя
      template:
        src: templates/user.yml.j2
        dest: "{{ master_home_dir }}/user.yml"

    - name: Применить ресурс пользователя
      ansible.builtin.shell: sudo -i d8 k create -f {{ master_home_dir }}/user.yml
      register: user_result
      failed_when: >
        user_result.rc != 0 and
        ('AlreadyExists' not in user_result.stderr)
      changed_when: "'AlreadyExists' not in user_result.stderr" 

