
    - name: Генерация SSH ключа для caps
      shell: ssh-keygen -t rsa -f /dev/shm/caps-id -C "" -N ""
      args:
        creates: /dev/shm/caps-id

    - name: Создать SSHCredentials ресурс
      ansible.builtin.shell: |
        sudo -i d8 k create -f - <<EOF
        apiVersion: deckhouse.io/v1alpha1
        kind: SSHCredentials
        metadata:
          name: caps
        spec:
          user: caps
          privateSSHKey: "`cat /dev/shm/caps-id | base64 -w0`"
        EOF
      register: ssh_credentials_result
      failed_when: >
        ssh_credentials_result.rc != 0 and
        ('AlreadyExists' not in ssh_credentials_result.stderr)    

    - name: Считать публичный ключ для передачи в воркер
      slurp:
        src: /dev/shm/caps-id.pub
      register: pubkey_content
    

- name: Подготовка worker-ноды
  hosts: worker
  become: true
  vars:
    pub_key: "{{ hostvars['master']['pubkey_content']['content'] | b64decode }}"
  tasks:
    - name: Создать пользователя caps и настроить SSH доступ
      block:
        - name: Добавить пользователя caps
          user:
            name: caps
            shell: /bin/bash
            groups: sudo
            append: yes
            create_home: yes

        - name: Настроить sudo без пароля для caps
          lineinfile:
            path: /etc/sudoers.d/caps
            create: yes
            line: 'caps ALL=(ALL) NOPASSWD: ALL'
            mode: '0440'

        - name: Создать .ssh и authorized_keys
          file:
            path: /home/caps/.ssh
            state: directory
            owner: caps
            group: caps
            mode: '0700'

        - name: Добавить публичный ключ
          copy:
            content: "{{ pub_key }}"
            dest: /home/caps/.ssh/authorized_keys
            owner: caps
            group: caps
            mode: '0600'

    - name: Подключить воркер-ноду к кластеру
      hosts: master
      become: true
      tasks:
        - name: Получить IP воркер-ноды
          set_fact:
            worker_ip: "{{ hostvars['worker-n1']['ansible_host'] }}"

        - name: Создать StaticInstance
          ansible.builtin.shell: |
            sudo -i d8 k create -f - <<EOF
            apiVersion: deckhouse.io/v1alpha1
            kind: StaticInstance
            metadata:
              name: d8cluster-worker
              labels:
                role: worker
            spec:
              address: "{{ worker_ip }}"
              credentialsRef:
                kind: SSHCredentials
                name: caps
            EOF
          register: static_instance_result
          failed_when: >
            static_instance_result.rc != 0 and
            ('AlreadyExists' not in static_instance_result.stderr)
          changed_when: "'AlreadyExists' not in static_instance_result.stderr"  