#!/bin/bash

set -e

PROJECT_DIR="deckhouse-ansible"
mkdir -p $PROJECT_DIR/{inventory,group_vars,host_vars,playbooks,roles/{common,tasks},templates,files}

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ $PROJECT_DIR..."

# ---------- inventory ----------
cat > $PROJECT_DIR/inventory/hosts.yml <<EOF
all:
  children:
    cluster:
      hosts:
        master:
          ansible_host: 192.168.29.24
        system:
          ansible_host: 91.217.196.183
        worker1:
          ansible_host: 192.168.39.58
        worker2:
          ansible_host: 91.217.196.152
EOF

# ---------- vault.yml ----------
cat > $PROJECT_DIR/vault.yml <<EOF
vault_ssh_user: angelos
vault_ssh_password: lazypeon
admin_password_bcrypt: 'JDJhJDEwJHBrLnBlR0MvYjI0NkxNL2t4RE1YME9TMDc0RTUxWlhma1NtS3E5dG9lY0VBWnZZZEpyeFNx'
EOF

echo "üîê –®–∏—Ñ—Ä—É–µ–º vault.yml..."
cd $PROJECT_DIR
ansible-vault encrypt vault.yml
cd ..

# ---------- group_vars/all.yml ----------
cat > $PROJECT_DIR/group_vars/all.yml <<EOF
ansible_user: angelos
ansible_ssh_private_key_file: ~/.ssh/id_rsa
ansible_become: true
EOF

# ---------- templates/config.yml.j2 ----------
cat > $PROJECT_DIR/templates/config.yml.j2 <<'EOF'
# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∞.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/installing/configuration.html#clusterconfiguration
apiVersion: deckhouse.io/v1
kind: ClusterConfiguration
clusterType: Static
# –ê–¥—Ä–µ—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–¥–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞.
podSubnetCIDR: 10.111.0.0/16
# –ê–¥—Ä–µ—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–µ—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞.
serviceSubnetCIDR: 10.222.0.0/16
kubernetesVersion: "Automatic"
# –î–æ–º–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä–∞.
clusterDomain: "cluster.local"
---
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ Deckhouse.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/installing/configuration.html#initconfiguration
apiVersion: deckhouse.io/v1
kind: InitConfiguration
deckhouse:
  imagesRepo: registry.deckhouse.ru/deckhouse/ce
  registryDockerCfg: eyJhdXRocyI6IHsgInJlZ2lzdHJ5LmRlY2tob3VzZS5ydSI6IHt9fX0K
---
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è deckhouse.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/modules/deckhouse/configuration.html
apiVersion: deckhouse.io/v1alpha1
kind: ModuleConfig
metadata:
  name: deckhouse
spec:
  version: 1
  enabled: true
  settings:
    bundle: Default
    # –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Deckhouse. –ö–∞–Ω–∞–ª Early Access –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω, –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö.
    # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –Ω–∏—Ö —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    # –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://deckhouse.ru/products/kubernetes-platform/documentation/v1/deckhouse-release-channels.html
    releaseChannel: Stable
    logLevel: Info
---
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Deckhouse.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/deckhouse-configure-global.html#%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B
apiVersion: deckhouse.io/v1alpha1
kind: ModuleConfig
metadata:
  name: global
spec:
  version: 2
  settings:
    modules:
      # –®–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ.
      # –ù–∞–ø—Ä–∏–º–µ—Ä, Grafana –¥–ª—è d8-elma365%s.domain.my –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –¥–æ–º–µ–Ω–µ 'd8-elma365grafana.domain.my'.
      # –î–æ–º–µ–Ω –ù–ï –î–û–õ–ñ–ï–ù —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ clusterDomain —Ä–µ—Å—É—Ä—Å–∞ ClusterConfiguration.
      # –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Å—Ä–∞–∑—É, –ª–∏–±–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —à–∞–≥–∞–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
      defaultClusterStorageClass: localpath
      publicDomainTemplate: "d8-elma365%s.domain.my"
---
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è user-authn.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/modules/user-authn/configuration.html
apiVersion: deckhouse.io/v1alpha1
kind: ModuleConfig
metadata:
  name: user-authn
spec:
  version: 2
  enabled: true
  settings:
    controlPlaneConfigurator:
      dexCAMode: DoNotNeed
    # –í–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API-—Å–µ—Ä–≤–µ—Ä—É Kubernetes —á–µ—Ä–µ–∑ Ingress.
    # https://deckhouse.ru/products/kubernetes-platform/documentation/v1/modules/user-authn/configuration.html#parameters-publishapi
    publishAPI:
      enabled: true
      https:
        mode: Global
        global:
          kubeconfigGeneratorMasterCA: ""
---
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è cni-cilium.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/modules/cni-cilium/configuration.html
apiVersion: deckhouse.io/v1alpha1
kind: ModuleConfig
metadata:
  name: cni-cilium
spec:
  version: 1
  # –í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å cni-cilium
  enabled: true
  settings:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è cni-cilium
    # https://deckhouse.ru/products/kubernetes-platform/documentation/v1/modules/cni-cilium/configuration.html
    tunnelMode: VXLAN
---
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞.
# https://deckhouse.ru/products/kubernetes-platform/documentation/v1/installing/configuration.html#staticclusterconfiguration
apiVersion: deckhouse.io/v1
kind: StaticClusterConfiguration
# –°–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ç–µ–π —É–∑–ª–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10.0.4.0/24'), –∫–æ—Ç–æ—Ä—ã–π
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤—è–∑–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Kubernetes (kube-apiserver, kubelet...) –º–µ–∂–¥—É —Å–æ–±–æ–π.
# –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–¥—É–ª—å virtualization –∏–ª–∏ —É–∑–ª—ã –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–º–µ—é—Ç –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
# –ï—Å–ª–∏ –Ω–∞ —É–∑–ª–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–µ—Å—É—Ä—Å StaticClusterConfiguration –º–æ–∂–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å.
  internalNetworkCIDRs:
    - {{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask | ipaddr('prefix') }}
EOF

# ---------- templates/nodegroup-system.yaml.j2 ----------
cat > $PROJECT_DIR/templates/nodegroup-system.yaml.j2 <<EOF
apiVersion: deckhouse.io/v1
kind: NodeGroup
metadata:
  name: system
spec:
  nodeTemplate:
    labels:
      node-role.deckhouse.io/system: ""
    taints:
      - effect: NoExecute
        key: dedicated.deckhouse.io
        value: system
  nodeType: Static
EOF

# ---------- templates/nodegroup-worker.yaml.j2 ----------
cat > $PROJECT_DIR/templates/nodegroup-worker.yaml.j2 <<EOF
apiVersion: deckhouse.io/v1
kind: NodeGroup
metadata:
  name: worker
spec:
  nodeType: Static
  kubelet:
    maxPods: 200
EOF

# ---------- playbooks/bootstrap.yml ----------
cat > $PROJECT_DIR/playbooks/bootstrap.yml <<'EOF'
- name: Install Deckhouse on master node
  hosts: master
  become: true
  vars_files:
    - ../vault.yml

  tasks:
    - name: Install required packages
      apt:
        name: [docker.io, jq, curl]
        state: present
        update_cache: yes

    - name: Install kubectl
      shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      args:
        creates: /usr/local/bin/kubectl

    - name: Create config.yml
      template:
        src: ../templates/config.yml.j2
        dest: /root/config.yml

    - name: Install Deckhouse
      shell: |
        docker run --pull=always -it \
        -v "/root/config.yml:/config.yml" \
        -v "/root/.ssh/:/tmp/.ssh/" \
        registry.deckhouse.ru/deckhouse/ce/install:stable bash -c \
        "dhctl bootstrap --ssh-user={{ vault_ssh_user }} \
          --ssh-host={{ ansible_host }} \
          --ssh-agent-private-keys=/tmp/.ssh/id_rsa \
          --config=/config.yml --ask-become-pass"
      args:
        executable: /bin/bash
EOF

# ---------- playbooks/add_nodegroup.yml ----------
cat > $PROJECT_DIR/playbooks/add_nodegroup.yml <<'EOF'
- name: Add system or worker nodes via NodeGroups
  hosts: master
  gather_facts: no
  vars_files:
    - ../vault.yml

  tasks:
    - name: Copy NodeGroup manifest
      template:
        src: ../templates/nodegroup-{{ node_role }}.yaml.j2
        dest: /root/{{ node_role }}.yaml

    - name: Apply NodeGroup
      shell: kubectl apply -f /root/{{ node_role }}.yaml

    - name: Fetch bootstrap script secret
      shell: |
        kubectl -n d8-cloud-instance-manager get secret manual-bootstrap-for-{{ node_role }} -o json | jq -r '.data."bootstrap.sh"' > /root/{{ node_role }}.b64

    - name: Decode bootstrap.sh
      shell: |
        base64 -d /root/{{ node_role }}.b64 > /root/{{ node_role }}.sh && chmod +x /root/{{ node_role }}.sh

    - name: Send and execute bootstrap script on nodes
      delegate_to: "{{ hostvars[item].ansible_host }}"
      become: true
      copy:
        src: /root/{{ node_role }}.sh
        dest: /tmp/bootstrap.sh
        mode: 0755
      loop: "{{ groups['cluster'] | difference(['master']) | select('match', node_role) | list }}"

    - name: Run bootstrap.sh on remote node
      delegate_to: "{{ hostvars[item].ansible_host }}"
      become: true
      shell: /tmp/bootstrap.sh
      loop: "{{ groups['cluster'] | difference(['master']) | select('match', node_role) | list }}"
EOF

echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤: $PROJECT_DIR"
echo "üí° –ò—Å–ø–æ–ª—å–∑—É–π:"
echo "   cd $PROJECT_DIR"
echo "   ansible-playbook -i inventory/hosts.yml playbooks/bootstrap.yml --ask-vault-pass"
echo "   ansible-playbook -i inventory/hosts.yml playbooks/add_nodegroup.yml --extra-vars node_role=system --ask-vault-pass"
echo "   ansible-playbook -i inventory/hosts.yml playbooks/add_nodegroup.yml --extra-vars node_role=worker --ask-vault-pass"
