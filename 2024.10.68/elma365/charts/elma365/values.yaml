language:
  allowed:
    - "ru-RU"
    - "en-US"
    - "sk-SK"
    - "es-ES"
    - "de-DE"
  default: "ru-RU"
global:
  env: production
  solution: 'onPremise'
  image:
    repository: hub.elma365.tech
    pullSecret:
      - yandexsecret
  replicaCount: 1
  annotations:
    depot.elma365.com/path: production
  edition: enterprise
  ingress:
    annotations: {}
  skipSslVerify: true
  chart: true
  onpremiseVersion: "2024.10.68"
  onpremiseCommitHash: "bad182cd08a2f61ed40984f2b960cd8883eecb21"
  maxGrpcMessageSize: "8388608"
  maxGrpcBackoffDelay: 2s
  activeDeadlineSeconds: 3000
  curlCreateCompanyMaxTime: 1800
  curlMigrationsMaxTime: 3000
  backoffLimit: 10
  setupJobTtlSecondsAfterFinished: 600
  resourceLimits: false
  resourcesJobs:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  autoscaling:
    enabled: true
    type: "hpa"
    minReplicas: 1
    maxReplicas: 9
    targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 80
  podAnnotations:
    config.linkerd.io/proxy-cpu-limit: "0.5"
    config.linkerd.io/proxy-cpu-request: "0.1"
    config.linkerd.io/proxy-memory-limit: 128Mi
    config.linkerd.io/proxy-memory-request: 64Mi
  postgres:
    maxIdleConns: 10
    maxOpenConns: 150
    poolMaxIdleConns: 10
    poolMaxOpenConns: 150
  allowUseAlternativePathModuleServices: true
  kubeVersion: ""
  helmLibrary: true
  openshift: false
  maintenanceMode: true
  maintenanceInfo: true
  managedServices:
    enabled: true
    namespace: elma365-applets
  podSecurityContext: {}
  securityContext: {}
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /readyz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    failureThreshold: 1
    successThreshold: 1
  startupProbe: {}
  monitoring:
    enabled: true
    namespace: ""
    metrics:
      enabled: true
      all: false # significantly more metrics , disabled to prevent prometheus from oom
    provisioner: "k8s" # "deckhouse"
    rmqExporterName: "dbsexporter-rabbitmq"
    dashboard:
      enabled: true
    alerts:
      enabled: false
    lowcode:
      metricExportEnabled: false # включить экспорт метрик отчета о производительности в Prometheus (дополнение Monitoring)
debug: false
auth:
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
balancer:
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "555Mi"
      cpu: "555m"
chat:
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "512Mi"
      cpu: "500m"
collector:
  appconfig:
    poolMaxOpenConns: 150
    poolMaxIdleConns: 50
  resources:
    requests:
      memory: "256Mi"
      cpu: "300m"
    limits:
      memory: "512Mi"
      cpu: "1200m"
contractor:
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
convertik:
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "555Mi"
      cpu: "555m"
deploy:
  appconfig:
    activateTimeout: 30m
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /readyz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    failureThreshold: 1
    successThreshold: 1
  dumper:
    livenessProbe:
      httpGet:
        path: /healthz
        port: http-dumper
      initialDelaySeconds: 30
      periodSeconds: 15
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /readyz
        port: http-dumper
      initialDelaySeconds: 30
      periodSeconds: 15
      timeoutSeconds: 2
      failureThreshold: 1
      successThreshold: 1
diskjockey:
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "700m"
db:
  psql:
    dbName: elma365
    user: postgres
    password: pgpassword
  mongo:
    dbName: elma365
    user: elma365
    password: mongopassword
    rootPassword: mongorootpassword
  rmq:
    vhName: elma365
    user: elma365
    password: rmqpassword
  s3:
    method: PUT
    accesskeyid: PZSF73JG72Ksd955JKU1HIA
    secretaccesskey: aFDkj28Jbs2JKbnvJH678MNwiz88zKjsuNBHHs
    bucket: s3elma365
    backend:
      address: host
      region: us-east-1
    ssl:
      enabled: "false"
    virtualHostedStyle:
      enabled: "false"
    dumpurl: ""
docflow:
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "512Mi"
      cpu: "500m"
exchange:
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "768Mi"
      cpu: "500m"
feeder:
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
front:
  appconfig:
    storeUrl: "https://store.elma365.ru"
    tinkoffTerminalKey: ""
    supportUrl: ""
    solution: "onPremise"
    showUnhandledErrors: false
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "1000m"
integrations:
  env:
    availableIntegrations: [all]
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "500m"
mailer:
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "512Mi"
      cpu: "500m"
main:
  skipSslVerify: true
  resources:
    requests:
      memory: "384Mi"
      cpu: "450m"
    limits:
      memory: "1024Mi"
      cpu: "1200m"
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
picasso:
  replicas: 0
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "555Mi"
      cpu: "555m"
processor:
  resources:
    requests:
      memory: "256Mi"
      cpu: "300m"
    limits:
      memory: "1024Mi"
      cpu: "1200m"
settings:
  appconfig:
    onPremiseEnabledFeatureFlags: []
  resources:
    requests:
      memory: "256Mi"
      cpu: "150m"
    limits:
      memory: "512Mi"
      cpu: "500m"
templater:
  resources:
    requests:
      memory: "384Mi"
      cpu: "150m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
vahter:
  appconfig:
    allowInsecureCookie: true
    activateTimeout: 30m
  resources:
    requests:
      memory: "128Mi"
      cpu: "150m"
    limits:
      memory: "256Mi"
      cpu: "1000m"
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
web-forms:
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
widget:
  resources:
    requests:
      memory: "256Mi"
      cpu: "150m"
    limits:
      memory: "512Mi"
      cpu: "500m"
worker:
  resources:
    requests:
      memory: "1024Mi"
      cpu: "500m"
    limits:
      memory: "2048Mi"
      cpu: "1000m"
  gatewayresources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
