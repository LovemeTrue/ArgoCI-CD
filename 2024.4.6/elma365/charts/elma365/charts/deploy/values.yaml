global:
  namespace: ""
  host: elma365.ru
  edition: "standard"
  solution: "onPremise"
  env: "production"
  labels: {}
  annotations: {}
  kubeVersion: ""
  containerPorts:
    deploy:
      http_port: 3000
    dumper:
      http_port: 3003
  http_metrics: 3100
  grpc_port: 5000
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  image:
    repository: dreg.elewise.com:5005
    pullPolicy: IfNotPresent
    pullSecret:
      - regsecret
      - yandexsecret
      - customsecret
  autoscaling:
    enabled: false
    type: "hpa"
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  holdingEnabled: false
  monitoring:
    enabled: false
    namespace: ""
    provisioner: "k8s"
    dashboard:
      enabled: false
    alerts:
      enabled: false
    metrics:
      interval: 30s
  metrics:
    enabled: false
    prometheusRule:
      enabled: false
  cronStartingDeadlineSeconds: ""
  cronTtlSecondsAfterFinished: ""
  cronActiveDeadlineSeconds: ""
  resourceLimits: false
  resourcesJobs: {}
  resources: {}
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    failureThreshold: 1
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /readyz
      port: http
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    failureThreshold: 1
    successThreshold: 1
  startupProbe: {}
  dumper:
    livenessProbe:
      httpGet:
        path: /healthz
        port: http-dumper
      initialDelaySeconds: 30
      periodSeconds: 15
      timeoutSeconds: 2
      failureThreshold: 1
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /readyz
        port: http-dumper
      initialDelaySeconds: 30
      periodSeconds: 15
      timeoutSeconds: 2
      failureThreshold: 1
      successThreshold: 1
    startupProbe: {}
  podSecurityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ingress:
    annotations: {}
    ingressClassName: ""
  companies:
images:
  service: ci-56f82efb
  dumper: ci-56f82efb
image:
  repository: {}
  pullSecret: {}
ingress:
  enabled:
    production: true
    staging: true
    testing: true
    _default: true
  annotations: {}
  password: ''
nameOverride: deploy
podSecurityContext: {}
podAnnotations: {}
kubeVersion: ""
resourcesJobs: {}
resources:
  requests:
    memory: "256Mi"
    cpu: "100m"
  limits:
    memory: "1024Mi"
    cpu: "1000m"
autoscaling: {}
livenessProbe: {}
readinessProbe: {}
startupProbe: {}
dumper:
  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}
terminationGracePeriodSeconds: 180
appconfig:
  defaultClusterID: 00000000-0000-0000-0000-000000000000
  httpClientTimeout: 1m
  activateTimeout: 5m
  dumpTimeout: 20m
  migrateTimeout: 1h
  demoConfigurationBucketName: demo-company
  elma365config:
    defaultConfiguration:
  task:
    liveCheckPeriod: 30s
    cancelingCheckPeriod: 1m
    recoverSchedule: "*/5 * * * *"
metrics:
  prometheusRule:
    rules:
      - alert: CompanyDeployFailed
        expr: sum(rate(elma365_deploy_create_company_total{code!='201'}[2m])) by (namespace,code) > 0
        for: 1s
        labels:
          severity: critical
        annotations:
          description: Deploy process for a company in "{{`{{ $labels.namespace }}`}}" has ended abnormal; The code is "{{`{{ $labels.code }}`}}"
          summary: Check -l app=deploy pods logs for details
      - record: elma365:companydeploy:success
        expr: |-
          sum by (namespace) (elma365_deploy_create_company_total{code='201'})
      - record: elma365:companydeploy:fail
        expr: |-
          sum by (namespace) (elma365_deploy_create_company_total{code!='201'})
annotations:
  ci.elma365.com/commit: "33634206"
  ci.elma365.com/checksum: "56f82efb"
  ci.elma365.com/job_id: "2152267"
  ci.elma365.com/timestamp: "2024-05-06T10:14:16+00:00"
  ci.elma365.com/pipeline_id: "417652"
